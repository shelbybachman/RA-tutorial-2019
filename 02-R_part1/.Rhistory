# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 2, ncol = 3, byrow = TRUE)
our_matrix
dim(our_matrix)
nrow(temp)
nrow(our_matrix)
ncol(our_matrix)
# print just the first row of our_matrix
our_matrix[1,]
# print the number in the 3rd row & 3rd column of our_matrix
our_matrix[3,3]
# print the number in the 3rd row & 2nd column of our_matrix
our_matrix[3,2]
# print the number in the 2nd row & 3rd column of our_matrix
our_matrix[2,3]
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, our_matrix), nrow = 3, ncol = 3)
# clear the workspace
rm(list = ls())
# create an object 'x' equal to the number 2
x <- 2
# create an object 'y' equal to the number 3
y <- 3
# now add x and y together, and store the result in a third object 'z'
z <- x + y
# find the square root of the sum of x-squared and y-squared
sqrt(x^2 + y ^ 2)
# create a vector 'vector_a' containing the variables x, y, and z
vector_a <- c(x, y, z)
# compute the number of elements in vector_a
length(vector_a)
# show the help screen for the length() function
?length
# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 2, ncol = 3, byrow = TRUE)
# get the dimensions of our_matrix
dim(our_matrix)
nrow(our_matrix)
ncol(our_matrix)
# print just the first row of our_matrix
our_matrix[1,]
# print the number in the 2nd row & 3rd column of our_matrix
our_matrix[2,3]
# take the column-wise sum of rows 1 & 2 of our_matrix
our_matrix[1,]+our_matrix[2,]
our_matrix
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, our_matrix[1,]+our_matrix[2,]), nrow = 3, ncol = 3)
our_matrix
######################
# RA tutorial / week 1
######################
###### section 1: vectors, matrices, and operations
# clear the workspace
rm(list = ls())
# create an object 'x' equal to the number 2
x <- 2
# create an object 'y' equal to the number 3
y <- 3
# now add x and y together, and store the result in a third object 'z'
z <- x + y
# find the square root of the sum of x-squared and y-squared
sqrt(x^2 + y ^ 2)
# create a vector 'vector_a' containing the variables x, y, and z
vector_a <- c(x, y, z)
# compute the number of elements in vector_a
length(vector_a)
# show the help screen for the length() function
?length
# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 2, ncol = 3, byrow = TRUE)
# get the dimensions of our_matrix
dim(our_matrix)
nrow(our_matrix)
ncol(our_matrix)
# print just the first row of our_matrix
our_matrix[1,]
# print the number in the 2nd row & 3rd column of our_matrix
our_matrix[2,3]
# take the column-wise sum of rows 1 & 2 of our_matrix
our_matrix[1,]+our_matrix[2,]
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, (our_matrix[1,]+our_matrix[2,])), nrow = 3, ncol = 3, byrow = TRUE)
our_matrix
######################
# RA tutorial / week 1
######################
###### section 1: vectors, matrices, and operations
# clear the workspace
rm(list = ls())
# create an object 'x' equal to the number 2
x <- 2
# create an object 'y' equal to the number 3
y <- 3
# now add x and y together, and store the result in a third object 'z'
z <- x + y
# find the square root of the sum of x-squared and y-squared
sqrt(x^2 + y ^ 2)
# create a vector 'vector_a' containing the variables x, y, and z
vector_a <- c(x, y, z)
# compute the number of elements in vector_a
length(vector_a)
# show the help screen for the length() function
?length
# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 2, ncol = 3, byrow = TRUE)
# get the dimensions of our_matrix
dim(our_matrix)
nrow(our_matrix)
ncol(our_matrix)
# print just the first row of our_matrix
our_matrix[1,]
# print the number in the 2nd row & 3rd column of our_matrix
our_matrix[2,3]
# take the column-wise sum of rows 1 & 2 of our_matrix
our_matrix[1,]+our_matrix[2,]
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, (our_matrix[1,]+our_matrix[2,])), nrow = 3, ncol = 3)
?our_dataframe
?as.data.frame
View(our_matrix)
######################
# RA tutorial / week 1
######################
###### section 1: vectors, matrices, and operations
# clear the workspace
rm(list = ls())
# create an object 'x' equal to the number 2
x <- 2
# create an object 'y' equal to the number 3
y <- 3
# now add x and y together, and store the result in a third object 'z'
z <- x + y
# find the square root of the sum of x-squared and y-squared
sqrt(x^2 + y ^ 2)
# create a vector 'vector_a' containing the variables x, y, and z
vector_a <- c(x, y, z)
# compute the number of elements in vector_a
length(vector_a)
# show the help screen for the length() function
?length
# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 3, ncol = 2, byrow = FALSE)
our_matrix
# get the dimensions of our_matrix
dim(our_matrix)
nrow(our_matrix)
ncol(our_matrix)
# print just the first column of our_matrix
our_matrix[,1]
# print the number in the 2nd row & 3rd column of our_matrix
our_matrix[2,3]
# print the number in the 3rd row & 2nd column of our_matrix
our_matrix[3,2]
# take the row-wise sum of rows 1 & 2 of our_matrix
our_matrix[,1]+our_matrix[,2]
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, (our_matrix[1,]+our_matrix[2,])), nrow = 3, ncol = 3)
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, (our_matrix[1,]+our_matrix[2,])), nrow = 3, ncol = 3, byrow = FALSE)
our_matrix
######################
# RA tutorial / week 1
######################
###### section 1: vectors, matrices, and operations
# clear the workspace
rm(list = ls())
# create an object 'x' equal to the number 2
x <- 2
# create an object 'y' equal to the number 3
y <- 3
# now add x and y together, and store the result in a third object 'z'
z <- x + y
# find the square root of the sum of x-squared and y-squared
sqrt(x^2 + y ^ 2)
# create a vector 'vector_a' containing the variables x, y, and z
vector_a <- c(x, y, z)
# compute the number of elements in vector_a
length(vector_a)
# show the help screen for the length() function
?length
# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 3, ncol = 2, byrow = FALSE)
# get the dimensions of our_matrix
dim(our_matrix)
nrow(our_matrix)
ncol(our_matrix)
# print just the first column of our_matrix
our_matrix[,1]
# print the number in the 3rd row & 2nd column of our_matrix
our_matrix[3,2]
# take the row-wise sum of rows 1 & 2 of our_matrix
our_matrix[,1]+our_matrix[,2]
our_matrix
our_matrix[,3] <- our_matrix[,1] + our_matrix[,2]
our_matrix[,1] + our_matrix[,2]
?matrix
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, (our_matrix[1,]+our_matrix[2,])), nrow = 3, ncol = 3, byrow = FALSE)
our_matrix
our_matrix
######################
# RA tutorial / week 1
######################
###### section 1: vectors, matrices, and operations
# clear the workspace
rm(list = ls())
# create an object 'x' equal to the number 2
x <- 2
# create an object 'y' equal to the number 3
y <- 3
# now add x and y together, and store the result in a third object 'z'
z <- x + y
# find the square root of the sum of x-squared and y-squared
sqrt(x^2 + y ^ 2)
# create a vector 'vector_a' containing the variables x, y, and z
vector_a <- c(x, y, z)
# compute the number of elements in vector_a
length(vector_a)
# show the help screen for the length() function
?length
# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 3, ncol = 2, byrow = FALSE)
# get the dimensions of our_matrix
dim(our_matrix)
nrow(our_matrix)
ncol(our_matrix)
# print just the first column of our_matrix
our_matrix[,1]
# print the number in the 3rd row & 2nd column of our_matrix
our_matrix[3,2]
# take the row-wise sum of rows 1 & 2 of our_matrix
our_matrix[,1]+our_matrix[,2]
our_matrix
our_matrix[,1]+our_matrix[,2]
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, (our_matrix[,1]+our_matrix[,2])), nrow = 3, ncol = 3, byrow = FALSE)
our_matrix
our_matrix
# convert our_matrix to a dataframe, and store it as 'our_dataframe'
our_dataframe <- as.data.frame(our_matrix)
# give our dataframe's columns names by creating a character vector
names(our_dataframe) <- c('a', 'a_squared', 'sum')
View(our_dataframe)
data(mtcars)
# see the first 10 rows of the dataframe
head(mtcars)
?data
?mtcars
?ToothGrowth
# load the mtcars dataset that is built into R
data(ToothGrowth)
# first, we should explore the dataset
# display the first 10 rows of the dataframe
head(mtcars, 10)
?str.dendrogram
?str
# first, we should explore the dataset
# display the first 10 rows of the dataframe
head(ToothGrowth, 10)
# the str() function gives a more comprehensive summary of the variables in a dataframe
str(ToothGrowth)
?ToothGrowth
# add a new column to our_dataframe equal to the square root of the sum, named 'sum_sqrt'
our_dataframe$sum_sqrt <- sqrt(our_dataframe$sum)
our_dataframe
# take the sum of the new 'sum_sqrt' column
sum(our_dataframe$sum_sqrt)
# sometimes we want to get a count of the number of observations of one variable
# create a table showing the number of observations for each dose
table(ToothGrowth$dose)
# create a table showing number of observations for each dose according to supplementation method
table(ToothGrowth$dose ~ ToothGrowth$supp)
?table
# create a table showing number of observations for each dose according to supplementation method
table(dose ~ supp, data = ToothGrowth)
# create a table showing number of observations where dose is greater than 1
table(ToothGrowth$dose > 1)
summary(ToothGrowth)
?summary
# find the maximum, minimum, and range of the tooth length values
max(ToothGrowth$len)
min(ToothGrowth$len)
range(ToothGrowth$len)
# determine whether the third element of vector_a is greater than 5
vector_a < 5
# determine whether the third element of vector_a is greater than 5
vector_a[3] > 5
?mean
# find the mean tooth length, stripping NAs if they exist
mean(ToothGrowth$len)
is.na(ToothGrowth$len)
# make a histogram of tooth length in the guinea pigs
hist(ToothGrowth$len, na.rm = TRUE)
?t.test
# it looks like there is an effect of supplementation method on tooth length.
# do a t-test to determine whether tooth length differs significantly by supplement.
t.test(len ~ supp, data = ToothGrowth, paired = FALSE)
# you can also store the results of your statistical test in an object
our_ttest <- t.test(len ~ supp, data = ToothGrowth, paired = FALSE)
our_ttest[[1]]
our_ttest[[2]]
our_ttest[[3]]
our_ttest[[4]]
rm(list = ls())
# create an object 'x' equal to the number 2
x <- 2
# create an object 'y' equal to the number 3
y <- 3
# now add x and y together, and store the result in a third object 'z'
z <- x + y
# find the square root of the sum of x-squared and y-squared
sqrt(x^2 + y ^ 2)
# create a vector 'vector_a' containing the variables x, y, and z
vector_a <- c(x, y, z)
# print the second element of vector_a
vector_a[2]
# compute the number of elements in vector_a
length(vector_a)
# show the help screen for the length() function
?length
# compute the number of unique elements in vector_a
unique(vector_a)
length(unique(vector_a))
# determine whether the third element of vector_a is greater than 5
vector_a[3] > 5
# create a vector 'vector_b' containing the squares of x, y, and z
vector_b <- vector_a^2
# create a matrix 'our_matrix' containing vector_a in row 1 and vector_b in row 2
our_matrix <- matrix(c(vector_a, vector_b), nrow = 3, ncol = 2, byrow = FALSE)
# get the dimensions of our_matrix
dim(our_matrix)
nrow(our_matrix)
ncol(our_matrix)
# print just the first column of our_matrix
our_matrix[,1]
# print the number in the 3rd row & 2nd column of our_matrix
our_matrix[3,2]
# take the row-wise sum of rows 1 & 2 of our_matrix
our_matrix[,1]+our_matrix[,2]
# add a third row to our_matrix, consisting of the column-wise sum of rows 1 & 2
our_matrix <- matrix(c(our_matrix, (our_matrix[,1]+our_matrix[,2])), nrow = 3, ncol = 3, byrow = FALSE)
our_matrix
#### section 2: dataframes
# convert our_matrix to a dataframe, and store it as 'our_dataframe'
our_dataframe <- as.data.frame(our_matrix)
# give our dataframe some columns names by creating a character vector
names(our_dataframe) <- c('a', 'a_squared', 'sum')
# print the sum column
our_dataframe$sum
# print the second value in the a_squared column
our_dataframe$a_squared[2]
# add a new column to our_dataframe equal to the square root of the sum, named 'sum_sqrt'
our_dataframe$sum_sqrt <- sqrt(our_dataframe$sum)
our_dataframe
# take the sum of the new 'sum_sqrt' column
sum(our_dataframe$sum_sqrt)
# the great thing about dataframes is that you can label columns, rows,
# and you can include multiple classes of data (i.e. character and numeric)
# in a single data table.
# let's try working with a more realistic dataframe built into R...
# load the ToothGrowth dataset that is built into R
data(ToothGrowth)
# this dataset shows odontoblast length (`len`) in 60 guinea pigs
# given vitamin c in one of two methods (`supp`, either orange juice (OJ) or ascorbic acid (VC))
# at one of three doses (`dose`, either 0.5, 1, or 2 mg/day)
# first, we should explore the dataset
# display the first 10 rows of the dataframe
head(ToothGrowth, 10)
# the str() function gives a more comprehensive summary of the variables in a dataframe
# it shows the number of observations, variables, each variable's class, and # of levels
str(ToothGrowth)
# sometimes we want to get a count of the number of observations of one variable
# create a table showing the number of observations for each dose
table(ToothGrowth$dose)
# create a table showing number of observations where dose is greater than 1
table(ToothGrowth$dose > 1)
#### section 3: basic stats & plotting
# the summary() command allows us to get the min, max, mean, and median of all numeric variables
summary(ToothGrowth)
# find the maximum, minimum, and range of the tooth length values
max(ToothGrowth$len)
min(ToothGrowth$len)
range(ToothGrowth$len)
# find the mean tooth length, stripping NAs if they exist
mean(ToothGrowth$len)
is.na(ToothGrowth$len)
table(is.na(ToothGrowth$len))
?mean
mean(ToothGrowth$len, na.rm = TRUE)
# find the standard deviation of tooth length
sd(ToothGrowth$len, na.rm = TRUE)
# make a histogram of tooth length in the guinea pigs
hist(ToothGrowth$len)
?hsit
?hist
?rand
?rnorm
?rnorm
rnorm(nrow(ToothGrowth))
ToothGrowth$randNumber <- rnorm(nrow(ToothGrowth))
# make a scatterplot of tooth length vs. the random number
plot(ToothGrowth$len, ToothGrowth$randNumber)
?hist
hist(ToothGrowth$len, color = 'turquoise',
xlab = 'length', ylab = 'frequency',
main = 'histogram of tooth length')
hist(ToothGrowth$len, color = 'blue',
xlab = 'length', ylab = 'frequency',
main = 'histogram of tooth length')
hist(ToothGrowth$len, col = 'blue',
xlab = 'length', ylab = 'frequency',
main = 'histogram of tooth length')
hist(ToothGrowth$len, col = 'blue',
xlab = 'length', ylab = 'frequency',
main = 'histogram of tooth length')
hist(ToothGrowth$len, col = 'aqua',
xlab = 'length', ylab = 'frequency',
main = 'histogram of tooth length')
hist(ToothGrowth$len, col = 'turquoise',
xlab = 'length', ylab = 'frequency',
main = 'histogram of tooth length')
# make a scatterplot of tooth length vs. the random number
plot(ToothGrowth$len, ToothGrowth$randNumber)
# make some aesthetic improvements ot the plot
plot(ToothGrowth$len, ToothGrowth$randNumber,
col = ToothGrowth$dose,
xlab = 'length', ylab = 'random number',
main = 'scatterplot of random number vs. tooth length')
# make some aesthetic improvements ot the plot
plot(ToothGrowth$len, ToothGrowth$randNumber,
col = ToothGrowth$supp,
xlab = 'length', ylab = 'random number',
main = 'scatterplot of random number vs. tooth length')
# make some aesthetic improvements ot the plot
plot(ToothGrowth$len, ToothGrowth$randNumber,
xlab = 'length', ylab = 'random number',
main = 'scatterplot of random number vs. tooth length')
?boxplot
# make a boxplot of tooth length vs. supplementation method
boxplot(len ~ supp:dose, data = ToothGrowth,
xlab = 'supplementation method', ylab = 'tooth length',
main = 'boxplot of tooth length by supp. method')
# make a boxplot of tooth length vs. supplementation method
boxplot(len ~ supp, data = ToothGrowth,
xlab = 'supplementation method', ylab = 'tooth length',
main = 'boxplot of tooth length by supp. method')
# make a boxplot of tooth length vs. supplementation method
boxplot(len ~ dose, data = ToothGrowth,
xlab = 'supplementation method', ylab = 'tooth length',
main = 'boxplot of tooth length by supp. method')
# make a boxplot of tooth length vs. supplementation method
boxplot(len ~ supp, data = ToothGrowth,
xlab = 'supplementation method', ylab = 'tooth length',
main = 'boxplot of tooth length by supp. method')
# make a boxplot of tooth length by supplementation method AND dose
boxplot(len ~ supp:dose, data = ToothGrowth,
xlab = 'supplementation method', ylab = 'tooth length',
main = 'boxplot of tooth length by supp. method')
?aov
# it also looked like there was an effect of dose on tooth length.
# do an ANOVA to determine whether there is a significant effect of dose on tooth length
our_anova <- aov(len ~ dose, data = ToothGrowth)
summary(our_anova)
?as.data.frame
data.frame
?data.frame
data.frame(fruit, letters, rating)
fruit <- c('apple', 'banana', 'melon', 'pear')
letters <- c(5, 6, 5, 4)
rating <- c(1.5, 3, 5, 3)
data.frame(fruit, letters, rating)
data_fruits <- data.frame(fruit, letters, rating)
table(ToothGrowth$supp*ToothGrowth$dose)
table(ToothGrowth$supp,ToothGrowth$dose)
# create a table showing number of observations for each dose for each supplement type
table(ToothGrowth$dose,ToothGrowth$supp)
